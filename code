/* 
Author: Yeva Kalish
Date: 10/15/2024
Program: PROJECT 1.A Interrupts with Debouncing: Slot Machine
Readme: This program lets you spin a slot machine type roll
using a 4-digit seven segment display and a button. Each digit
will spin at a different interval, so push the button to stop it one at a time.
Once you stop all the digits, it will display a message on the serial monitor
to show if you won, as well as light up the LED based on it. Press the button
again to roll again.
*/

#include "SevSeg.h"
SevSeg ssd;  //Initiate a seven segment controller object
const int buttonPin = 2, redLED = 39, greenLED = 40, blueLED = 41;
const bool resistorsOnSegments = 0;
//keep track of last event per digit
unsigned long lastTime1, lastTime2, lastTime3, lastTime4;
//digit periods
const unsigned long period1 = 200, period2 = 400, period3 = 600, period4 = 1000;
//number to print to seven segment display
int printNum = 1111;
//booleans for digits to spin
volatile bool canSpin1 = true, canSpin2 = true, canSpin3 = true, canSpin4 = true;
volatile int timesPressed = 0;
//debounce
const int debounceDelay = 200;
unsigned long lastButtonDebounce;
volatile bool ok2Press = true;

void setup() {
  byte numDigits = 4;
  byte digitPins[] = { 22, 23, 24, 25 };
  //                   D1, D2, D3, D4
  byte segmentPins[] = { 4, 5, 6, 7, 8, 9, 10, 11 };
  //                     A, B, C, D, E, F,  G, DP
  ssd.begin(COMMON_CATHODE, numDigits, digitPins, segmentPins, resistorsOnSegments);
  ssd.setBrightness(90);
  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(redLED, OUTPUT);
  pinMode(greenLED, OUTPUT);
  pinMode(blueLED, OUTPUT);
  Serial.begin(9600);
  lastTime1 = millis();  //set the start milli to 0
  lastTime2 = millis();
  lastTime3 = millis();
  lastTime4 = millis();
  attachInterrupt(digitalPinToInterrupt(buttonPin), button, RISING);
  setRGB(0, 0, 1);
}

void loop() {
  //last event timer check for each digit
  if (spinNum(1, lastTime1, period1, canSpin1)) lastTime1 = millis();
  if (spinNum(2, lastTime2, period2, canSpin2)) lastTime2 = millis();
  if (spinNum(3, lastTime3, period3, canSpin3)) lastTime3 = millis();
  if (spinNum(4, lastTime4, period4, canSpin4)) lastTime4 = millis();

  //print number on sev seg
  ssd.setNumber(printNum);
  ssd.refreshDisplay();  // Must run repeatedly

  //button debounce
  if (check(lastButtonDebounce, debounceDelay)) {
    ok2Press = true;
    lastButtonDebounce = millis();
  }
}

//rgb led function
void setRGB(int redBright, int greenBright, int blueBright) {
  digitalWrite(redLED, redBright);
  digitalWrite(greenLED, greenBright);
  digitalWrite(blueLED, blueBright);
}

bool check(unsigned long previousTime, unsigned long eventInterval) {
  return ((millis() - previousTime) >= eventInterval);  //see if diff matches desired period
}

//power function that returns int
int power(int exponent) {
  int ten = 1;
  for (int i = 0; i < exponent; i++) {
    ten *= 10;
  }
  return ten;
}

//rolls the signified digit using that digit's period
bool spinNum(int digit, unsigned long previousTime, unsigned long eventInterval, bool canSpin) {
  if (check(previousTime, eventInterval) && canSpin) {  //if the period time has elapsed
    int ten = power(5 - digit);                         //number to get to digit number in printNum
    int ten2 = power(4 - digit);                        //number to subtract if digit number = 9
    if ((printNum % ten) >= (9 * ten2)) {               //if digit number = 9
      printNum -= (8 * ten2);                           //back to 1
    } else {
      printNum += ten2;  //add 1
    }
    return true;
  } else {
    return false;
  }
}

//counts up when button is pressed to turn each digit off
void button() {  //switch cases
  if (ok2Press) {
    ok2Press = false;  //ISR AFTER THIS
    timesPressed++;
    if (timesPressed == 1) {
      canSpin1 = false;
    } else if (timesPressed == 2) {
      canSpin2 = false;
    } else if (timesPressed == 3) {
      canSpin3 = false;
    } else if (timesPressed == 4) {
      canSpin4 = false;
      winCheck();
    } else {
      setRGB(0, 0, 1);
      timesPressed = 0;
      canSpin1 = true;
      canSpin2 = true;
      canSpin3 = true;
      canSpin4 = true;
    }
  }
}

//if all 4 digits match, prints win message and turns led green
//if don't match, prints lose message and turns led red
//reset press turns led back to blue
void winCheck() {
  int dig1 = printNum / 1000;
  Serial.println(dig1);
  int dig2 = (printNum / 100) % 10;
  Serial.println(dig2);
  int dig3 = (printNum / 10) % 10;
  Serial.println(dig3);
  int dig4 = printNum % 10;
  Serial.println(dig4);
  if (dig1 == dig2 && dig2 == dig3 && dig3 == dig4) {
    Serial.println("You win!! GG");
    setRGB(0, 1, 0);
  } else {
    Serial.println("You lose!! GG no re");
    setRGB(1, 0, 0);
  }
}
